{"version":3,"sources":["components/PlayNumber.js","components/StarsDisplay.js","App.js","reportWebVitals.js","index.js"],"names":["PlayNumber","style","background","colors","this","props","status","className","onClick","number","Component","available","used","wrong","candidate","StarsDisplay","PlayAgain","utils","sum","arr","reduce","acc","curr","range","min","max","Array","from","length","_","i","random","Math","floor","randomSumIn","sets","sums","j","len","candidateSet","concat","candidateSum","push","App","useState","stars","setStar","availableNums","setAvailableNums","condidateNums","setaCondidatsNum","condidateNumsWrong","gameIsOver","numberStatus","includes","onNumberClick","currentState","newCandidatNums","filter","cn","newAvailableNums","n","map","starId","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.df4e17ec.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\n\r\n\r\nclass PlayNumber extends Component{\r\n\r\n\r\n\r\n    render(){\r\n\r\n        return  <button style={{background:colors[this.props.status]}} className=\"number\" onClick={()=>this.props.onClick(this.props.number, this.props.status)}>{this.props.number}</button>\r\n    }\r\n\r\n\r\n}\r\n// Color Theme\r\nconst colors = {\r\n    available: 'lightgray',\r\n    used: 'lightgreen',\r\n    wrong: 'lightcoral',\r\n    candidate: 'deepskyblue',\r\n  };\r\n\r\n\r\nexport default PlayNumber;","import React, { Component } from 'react';\r\n\r\n\r\nclass StarsDisplay extends Component{\r\n\r\n    \r\n\r\n    render(){\r\n\r\n        return <div  className=\"star\" />\r\n    }\r\n\r\n\r\n}\r\n\r\n\r\n\r\nexport default StarsDisplay;","import React, {  useState } from \"react\";\nimport './App.css';\nimport PlayNumber from \"./components/PlayNumber\";\nimport StarsDisplay from \"./components/StarsDisplay\";\n\n\nconst PlayAgain = props => (\n\t<div className=\"game-done\">\n\t  <button onClick={props.onClick}>Play Again</button>\n\t</div>\n);\n\nconst App = () =>{\n  const  [stars, setStar] =useState(utils.random(1,9));\n  const  [availableNums ,setAvailableNums] = useState(utils.range(1,9));\n  const  [condidateNums , setaCondidatsNum] = useState([]);\n  \n  const resetGame = () => {\n    setStar(utils.random(1, 9));\n    setAvailableNums(utils.range(1, 9));\n    setaCondidatsNum([]);\n  };\n\n  // if the sum of possibles candidates bigger than num of stars\n  const condidateNumsWrong = utils.sum(condidateNums) > stars;\n  const gameIsOver = utils.sum(availableNums) === 0 ;\n  const numberStatus = (number) => {\n    //check if num is available or not\n    if (!availableNums.includes(number)) {\n\n      return 'used';\n      \n    }\n    // check if sum of condidats wrong or not\n    if (condidateNums.includes(number)) {\n      return condidateNumsWrong ? 'wrong'  : 'candidate';\n      \n    }\n    return 'available';\n\n  }\n  // button click logic\n  const onNumberClick =(number , currentState) =>{\n    //console.log(\"condidates nums \"+condidateNums);\n    //if the current number is used don't do any thing \n    if (currentState === \"used\") {\n      return;\n    }\n    // condidat number\n    const newCandidatNums = currentState ==='available' ?\n     condidateNums.concat(number):  condidateNums.filter(cn => cn !== number);\n    //check if newCandidatNums is not  a correct answer\n    if (utils.sum(newCandidatNums) !== stars) {\n        // set the state\n        setaCondidatsNum(newCandidatNums);\n\n    } else{\n      // extract newCandidatNums from available nums \n     const newAvailableNums = availableNums.filter(\n       n => !newCandidatNums.includes(n)\n     ); \n     setStar(utils.randomSumIn(newAvailableNums,9));\n     setAvailableNums(newAvailableNums);\n     setaCondidatsNum([]);\n\n    }\n \n    \n    \n  }\n\n  return (\n    <div className=\"game\">\n      <div className=\"help\">\n        Pick 1 or more numbers that sum to the number of stars\n      </div>\n      <div className=\"body\">\n        <div className=\"left\">\n         \n          {  gameIsOver ? <PlayAgain onClick={resetGame}/> :utils.range(1,stars).map(starId =><StarsDisplay key={starId} />) }\n        </div>\n        <div className=\"right\">\n         \n              {utils.range(1,9).map(number=>\n                    <PlayNumber \n                    status={numberStatus(number)}   \n                    key={number} \n                    number={number}\n                    onClick={onNumberClick}\n                    />\n                )}\n        </div>\n      </div>\n      <div className=\"timer\">Time Remaining: 10</div>\n    </div>\n  );\n}\n\n\n\n// Math science\nconst utils = {\n  // Sum an array\n  sum: arr => arr.reduce((acc, curr) => acc + curr, 0),\n\n  // create an array of numbers between min and max (edges included)\n  range: (min, max) => Array.from({ length: max - min + 1 }, (_, i) => min + i),\n\n  // pick a random number between min and max (edges included)\n  random: (min, max) => min + Math.floor(Math.random() * (max - min + 1)),\n\n  // Given an array of numbers and a max...\n  // Pick a random sum (< max) from the set of all available sums in arr\n  randomSumIn: (arr, max) => {\n    const sets = [[]];\n    const sums = [];\n    for (let i = 0; i < arr.length; i++) {\n      for (let j = 0, len = sets.length; j < len; j++) {\n        const candidateSet = sets[j].concat(arr[i]);\n        const candidateSum = utils.sum(candidateSet);\n        if (candidateSum <= max) {\n          sets.push(candidateSet);\n          sums.push(candidateSum);\n        }\n      }\n    }\n    return sums[utils.random(0, sums.length - 1)];\n  },\n};\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}